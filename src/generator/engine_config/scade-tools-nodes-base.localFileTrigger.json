{"init_kwargs": {"input_desc": {"properties": {"credentials": {"type": "object", "ui-type": "collections", "x-order": -10, "properties": {}}, "options": {"x-order": 4, "title": "Options", "temp_default": {}, "displayName": "Options", "type": "object", "ui-type": "collections", "properties": {"awaitWriteFinish": {"x-order": 0, "description": "Whether to wait until files finished writing to avoid partially read", "title": "Await Write Finish", "temp_default": false, "default": false, "displayName": "Await Write Finish", "type": "boolean"}, "ignoreInitial": {"x-order": 3, "description": "Whether to ignore existing files/folders to not trigger an event", "title": "Ignore Existing Files/Folders", "temp_default": true, "default": true, "displayName": "Ignore Existing Files/Folders", "type": "boolean"}, "ignored": {"x-order": 2, "description": "Files or paths to ignore. The whole path is tested, not just the filename.\u00a0Supports <a href=\"https://github.com/micromatch/anymatch\">Anymatch</a>- syntax.", "title": "Ignore", "temp_default": "", "displayName": "Ignore", "type": "string"}, "depth": {"x-order": 4, "description": "How deep into the folder structure to watch for changes", "title": "Max Folder Depth", "temp_default": -1, "default": -1, "displayName": "Max Folder Depth", "enum": [1, 2, 3, 4, 5, 0, -1]}, "followSymlinks": {"x-order": 1, "description": "Whether linked files/folders will also be watched (this includes symlinks, aliases on MacOS and shortcuts on Windows). Otherwise only the links themselves will be monitored).", "title": "Include Linked Files/Folders", "temp_default": true, "default": true, "displayName": "Include Linked Files/Folders", "type": "boolean"}, "usePolling": {"x-order": 5, "description": "Whether to use polling for watching. Typically necessary to successfully watch files over a network.", "title": "Use Polling", "temp_default": false, "default": false, "displayName": "Use Polling", "type": "boolean"}}, "required": []}, "triggerOn": {"x-order": 0, "title": "Trigger On", "temp_default": "", "displayName": "Trigger On", "enum": ["file", "folder"]}, "events": {}, "load_files": {"title": "Load files to context", "x-order": -5, "type": "array", "items": {"title": "File info", "type": "object", "properties": {"url": {"title": "Url", "type": "string", "format": "uri", "displayOptions": {"show": {"group": ["url"]}}}, "base": {"title": "Bytes", "type": "string", "displayOptions": {"show": {"group": ["base"]}}}, "name": {"title": "Context filename", "type": "string", "default": "data"}, "group": {"type": "string", "default": "url", "enum": ["url", "base"]}}}}, "path": {"anyOf": [{"x-order": 1, "title": "File to Watch", "temp_default": "", "displayOptions": {"show": {"triggerOn": ["file"]}}, "displayName": "File to Watch", "type": "string"}, {"x-order": 2, "title": "Folder to Watch", "temp_default": "", "displayOptions": {"show": {"triggerOn": ["folder"]}}, "displayName": "Folder to Watch", "type": "string"}]}}, "required": ["triggerOn", "events"], "title": "Input", "type": "object"}, "title": "Scade tools: Local File Trigger", "description": "Triggers a workflow on file system changes", "scade_tools_node_name": "scade-tools-nodes-base.localFileTrigger", "scade_tools_node_version": 1, "categories": ["Core Nodes"]}, "class_name": "ScadeToolsProcessor", "license_url": null}