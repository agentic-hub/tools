{"init_kwargs": {"input_desc": {"properties": {"credentials": {"type": "object", "ui-type": "collections", "x-order": -10, "properties": {}}, "sourceData": {"x-order": 3, "description": "If HTML should be read from binary or JSON data", "title": "Source Data", "temp_default": "json", "default": "json", "displayOptions": {"show": {"operation": ["extractHtmlContent"]}}, "displayName": "Source Data", "enum": ["binary", "json"]}, "html": {"x-order": 1, "description": "HTML template to render", "title": "HTML Template", "temp_default": "<!DOCTYPE html>\n\n<html>\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>My HTML document</title>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>This is an H1 heading</h1>\n    <h2>This is an H2 heading</h2>\n    <p>This is a paragraph</p>\n  </div>\n</body>\n</html>\n\n<style>\n.container {\n  background-color: #ffffff;\n  text-align: center;\n  padding: 16px;\n  border-radius: 8px;\n}\n\nh1 {\n  color: #ff6d5a;\n  font-size: 24px;\n  font-weight: bold;\n  padding: 8px;\n}\n\nh2 {\n  color: #909399;\n  font-size: 18px;\n  font-weight: bold;\n  padding: 8px;\n}\n</style>\n\n<script>\nconsole.log(\"Hello World!\");\n</script>", "default": "<!DOCTYPE html>\n\n<html>\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>My HTML document</title>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>This is an H1 heading</h1>\n    <h2>This is an H2 heading</h2>\n    <p>This is a paragraph</p>\n  </div>\n</body>\n</html>\n\n<style>\n.container {\n  background-color: #ffffff;\n  text-align: center;\n  padding: 16px;\n  border-radius: 8px;\n}\n\nh1 {\n  color: #ff6d5a;\n  font-size: 24px;\n  font-weight: bold;\n  padding: 8px;\n}\n\nh2 {\n  color: #909399;\n  font-size: 18px;\n  font-weight: bold;\n  padding: 8px;\n}\n</style>\n\n<script>\nconsole.log(\"Hello World!\");\n</script>", "displayOptions": {"show": {"operation": ["generateHtmlTemplate"]}}, "typeOptions": {"editor": "htmlEditor"}, "displayName": "HTML Template", "type": "string"}, "options": {"anyOf": [{"x-order": 8, "title": "Options", "temp_default": {}, "displayOptions": {"show": {"operation": ["extractHtmlContent"]}}, "displayName": "Options", "type": "object", "ui-type": "collections", "properties": {"trimValues": {"x-order": 0, "description": "Whether to remove automatically all spaces and newlines from the beginning and end of the values", "title": "Trim Values", "temp_default": true, "default": true, "displayName": "Trim Values", "type": "boolean"}}, "required": []}, {"x-order": 9, "title": "Options", "temp_default": {}, "displayOptions": {"show": {"operation": ["convertToHtmlTable"]}}, "displayName": "Options", "type": "object", "ui-type": "collections", "properties": {"cellAttributes": {"x-order": 6, "description": "Attributes to attach to the table cell", "title": "Cell Attributes", "temp_default": "", "displayName": "Cell Attributes", "type": "string"}, "rowAttributes": {"x-order": 5, "description": "Attributes to attach to the table row", "title": "Row Attributes", "temp_default": "", "displayName": "Row Attributes", "type": "string"}, "tableAttributes": {"x-order": 3, "description": "Attributes to attach to the table", "title": "Table Attributes", "temp_default": "", "displayName": "Table Attributes", "type": "string"}, "headerAttributes": {"x-order": 4, "description": "Attributes to attach to the table header", "title": "Header Attributes", "temp_default": "", "displayName": "Header Attributes", "type": "string"}, "customStyling": {"x-order": 1, "description": "Whether to use custom styling", "title": "Custom Styling", "temp_default": false, "default": false, "displayName": "Custom Styling", "type": "boolean"}, "capitalize": {"x-order": 0, "description": "Whether to capitalize the headers", "title": "Capitalize Headers", "temp_default": false, "default": false, "displayName": "Capitalize Headers", "type": "boolean"}, "caption": {"x-order": 2, "description": "Caption to add to the table", "title": "Caption", "temp_default": "", "displayName": "Caption", "type": "string"}}, "required": []}]}, "load_files": {"title": "Load files to context", "x-order": -5, "type": "array", "items": {"title": "File info", "type": "object", "properties": {"url": {"title": "Url", "type": "string", "format": "uri", "displayOptions": {"show": {"group": ["url"]}}}, "base": {"title": "Bytes", "type": "string", "displayOptions": {"show": {"group": ["base"]}}}, "name": {"title": "Context filename", "type": "string", "default": "data"}, "group": {"type": "string", "default": "url", "enum": ["url", "base"]}}}}, "notice": {"x-order": 2, "title": "<b>Tips</b>: Type ctrl+space for completions. Use <code>{{ }}</code> for expressions and <code>&lt;style&gt;</code> tags for CSS. JS in <code>&lt;script&gt;</code> tags is included but not executed in n8n.", "temp_default": "", "displayOptions": {"show": {"operation": ["generateHtmlTemplate"]}}, "displayName": "<b>Tips</b>: Type ctrl+space for completions. Use <code>{{ }}</code> for expressions and <code>&lt;style&gt;</code> tags for CSS. JS in <code>&lt;script&gt;</code> tags is included but not executed in n8n.", "type": "string", "ui-type": "notice"}, "extractionValues": {"anyOf": [{"x-order": 6, "title": "Extraction Values", "temp_default": {}, "displayOptions": {"show": {"operation": ["extractHtmlContent"], "@version": [1]}}, "typeOptions": {"multipleValues": true}, "displayName": "Extraction Values", "type": "object", "properties": {"values": {"title": "Values", "displayName": "Values", "type": "array", "items": {"type": "object", "properties": {"returnValue": {"x-order": 2, "description": "What kind of data should be returned", "title": "Return Value", "temp_default": "text", "default": "text", "displayName": "Return Value", "enum": ["attribute", "html", "text", "value"]}, "returnArray": {"x-order": 4, "description": "Whether to return the values as an array so if multiple ones get found they also get returned separately. If not set all will be returned as a single string.", "title": "Return Array", "temp_default": false, "default": false, "displayName": "Return Array", "type": "boolean"}, "attribute": {"x-order": 3, "description": "The name of the attribute to return the value off", "title": "Attribute", "temp_default": "", "displayOptions": {"show": {"returnValue": ["attribute"]}}, "displayName": "Attribute", "type": "string"}, "key": {"x-order": 0, "description": "The key under which the extracted value should be saved", "title": "Key", "temp_default": "", "displayName": "Key", "type": "string"}, "cssSelector": {"x-order": 1, "description": "The CSS selector to use", "title": "CSS Selector", "temp_default": "", "displayName": "CSS Selector", "type": "string"}}, "required": ["returnValue", "returnArray", "attribute", "key", "cssSelector"]}}}}, {"x-order": 7, "title": "Extraction Values", "temp_default": {"values": [{"key": "", "cssSelector": "", "returnValue": "text", "returnArray": false}]}, "displayOptions": {"show": {"operation": ["extractHtmlContent"], "@version": [{"_cnd": {"gt": 1}}]}}, "typeOptions": {"multipleValues": true}, "displayName": "Extraction Values", "type": "object", "properties": {"values": {"title": "Values", "displayName": "Values", "type": "array", "items": {"type": "object", "properties": {"returnValue": {"x-order": 2, "description": "What kind of data should be returned", "title": "Return Value", "temp_default": "text", "default": "text", "displayName": "Return Value", "enum": ["attribute", "html", "text", "value"]}, "returnArray": {"x-order": 4, "description": "Whether to return the values as an array so if multiple ones get found they also get returned separately. If not set all will be returned as a single string.", "title": "Return Array", "temp_default": false, "default": false, "displayName": "Return Array", "type": "boolean"}, "attribute": {"x-order": 3, "description": "The name of the attribute to return the value off", "title": "Attribute", "temp_default": "", "displayOptions": {"show": {"returnValue": ["attribute"]}}, "displayName": "Attribute", "type": "string"}, "key": {"x-order": 0, "description": "The key under which the extracted value should be saved", "title": "Key", "temp_default": "", "displayName": "Key", "type": "string"}, "cssSelector": {"x-order": 1, "description": "The CSS selector to use", "title": "CSS Selector", "temp_default": "", "displayName": "CSS Selector", "type": "string"}}, "required": ["returnValue", "returnArray", "attribute", "key", "cssSelector"]}}}}]}, "operation": {"x-order": 0, "title": "Operation", "temp_default": "generateHtmlTemplate", "default": "generateHtmlTemplate", "displayName": "Operation", "enum": ["generateHtmlTemplate", "extractHtmlContent", "convertToHtmlTable"]}, "dataPropertyName": {"anyOf": [{"x-order": 4, "title": "Input Binary Field", "temp_default": "data", "default": "data", "displayOptions": {"show": {"operation": ["extractHtmlContent"], "sourceData": ["binary"]}}, "displayName": "Input Binary Field", "type": "string"}, {"x-order": 5, "description": "Name of the JSON property in which the HTML to extract the data from can be found. The property can either contain a string or an array of strings.", "title": "JSON Property", "temp_default": "data", "default": "data", "displayOptions": {"show": {"operation": ["extractHtmlContent"], "sourceData": ["json"]}}, "displayName": "JSON Property", "type": "string"}]}}, "required": ["dataPropertyName"], "title": "Input", "type": "object"}, "title": "Scade tools: HTML", "description": "Work with HTML", "scade_tools_node_name": "scade-tools-nodes-base.html", "scade_tools_node_version": 1, "categories": ["Core Nodes"]}, "class_name": "ScadeToolsProcessor", "license_url": null}